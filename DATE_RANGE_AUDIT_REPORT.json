{
  "audit_metadata": {
    "audit_date": "2025-01-XX",
    "codebase": "analytics-dashboard-tailadmin",
    "scope": "Complete date range manipulation analysis across Analytics, Home, Chatbot pages",
    "trigger": "Suspected double-offset bug: DatePicker may subtract -1 day, then computeRangesForKPI subtracts another -1 day"
  },
  "summary": {
    "global_policy": "END DATE POLICY: All ranges default to ending YESTERDAY UTC (-1 day). User-selected ranges are clamped to yesterday max.",
    "critical_finding": "DOUBLE OFFSET CONFIRMED: Multiple layers subtract days independently, causing inconsistent date ranges across sections.",
    "total_files_analyzed": 24,
    "total_date_manipulation_points": 47,
    "high_risk_issues": 5,
    "affected_areas": [
      "Analytics KPIs",
      "Chatbot Services",
      "DatePicker Component",
      "UnifiedTimeContext",
      "API Routes"
    ],
    "timezone_standard": "UTC across all components"
  },
  "findings": [
    {
      "category": "CRITICAL - Double Offset Bug",
      "file": "src/lib/utils/time/dateRangeWindow.ts",
      "symbols": ["deriveRangeEndingYesterday", "derivePrevShifted"],
      "timezone": "UTC",
      "current_range_logic": "deriveRangeEndingYesterday: yesterday = addDaysUTC(todayUTC(), -1) → OFFSET 1",
      "previous_range_logic": "derivePrevShifted: start = addDaysUTC(s, -shiftDays) where shiftDays=1 → OFFSET 2 (double offset)",
      "granularity_ui": "d/w/m/y from user selection",
      "granularity_request": "Always 'd' to Mindsaic API (chatbot), varies for GA4",
      "offsets": [
        {
          "layer": "deriveRangeEndingYesterday",
          "offset": "-1 day",
          "purpose": "End defaults to yesterday"
        },
        {
          "layer": "derivePrevShifted",
          "offset": "-1 day",
          "purpose": "Previous range shift"
        }
      ],
      "formatting": "YYYY-MM-DD (ISO) for internal, YYYYMMDD for Mindsaic",
      "risk_level": "HIGH",
      "notes": "DEPRECATED FILE - Still used by old code. Should migrate to timeWindows.ts standardized functions."
    },
    {
      "category": "CRITICAL - DatePicker Clamping",
      "file": "src/components/common/DateRangePicker.tsx",
      "symbols": ["yesterdayUTC", "maxDate"],
      "timezone": "UTC",
      "current_range_logic": "maxDate: yesterdayUTC() = addDaysUTC(todayUTC(), -1) → OFFSET 1",
      "previous_range_logic": "N/A - User selection only",
      "granularity_ui": "N/A - Pure date picker",
      "granularity_request": "N/A",
      "offsets": [
        {
          "layer": "DateRangePicker.maxDate",
          "offset": "-1 day",
          "purpose": "Block future dates, clamp to yesterday"
        }
      ],
      "formatting": "flatpickr format 'M d, Y' for display",
      "risk_level": "HIGH",
      "notes": "This is CORRECT behavior (UI constraint). But if downstream code ALSO subtracts -1, you get double offset."
    },
    {
      "category": "CRITICAL - Context Date Manipulation",
      "file": "src/features/analytics/context/UnifiedTimeContext.tsx",
      "symbols": [
        "yesterdayUTC",
        "calculateRangeForPeriod",
        "presetForGranularity",
        "setRange"
      ],
      "timezone": "UTC (Date objects, not explicit UTC methods)",
      "current_range_logic": "calculateRangeForPeriod: yesterday = new Date(today); yesterday.setDate(yesterday.getDate() - 1) → OFFSET 1",
      "previous_range_logic": "getPreviousPeriod: calls calculatePreviousPeriodAndGranularity from rangeCalculations.ts",
      "granularity_ui": "d/w/m/y from user selection (mode: 'granularity' | 'range')",
      "granularity_request": "getCalculatedGranularity respects user granularity in 'granularity' mode, auto-calculates in 'range' mode",
      "offsets": [
        {
          "layer": "calculateRangeForPeriod",
          "offset": "-1 day for yesterday anchor",
          "purpose": "All presets end yesterday"
        },
        {
          "layer": "setRange clamp",
          "offset": "Clamps endDate to yesterdayUTC()",
          "purpose": "Prevent future dates"
        }
      ],
      "formatting": "Date objects internally, toISOString().split('T')[0] for ISO",
      "risk_level": "MEDIUM",
      "notes": "Uses LOCAL Date() for calculations (not explicit UTC), but calls yesterdayUTC() which uses UTC. MIXED timezone approach - potential drift."
    },
    {
      "category": "HIGH - Standardized Time Windows (NEW)",
      "file": "src/lib/utils/time/timeWindows.ts",
      "symbols": [
        "computeRangesForKPI",
        "computeRangesForSeries",
        "shiftPrevRange",
        "deriveRangeEndingYesterday"
      ],
      "timezone": "UTC",
      "current_range_logic": "computeRangesFromQuery: Uses deriveRangeEndingYesterday (from datetime.ts) which does addDaysUTC(todayUTC(), -1) → OFFSET 1",
      "previous_range_logic": "shiftPrevRange: prevEnd = addDaysUTC(currentEnd, -shiftDays) where shiftDays=1 for d/w/m, 30 for y → OFFSET 2",
      "granularity_ui": "d/w/m/y",
      "granularity_request": "dayAsWeek parameter: false for KPI (d=1 day), true for Series (d=7 days)",
      "offsets": [
        {
          "layer": "deriveRangeEndingYesterday",
          "offset": "-1 day",
          "purpose": "End defaults to yesterday"
        },
        {
          "layer": "shiftPrevRange",
          "offset": "-1 day (d/w/m) or -30 days (y)",
          "purpose": "Previous range shift"
        }
      ],
      "formatting": "YYYY-MM-DD (ISO)",
      "risk_level": "MEDIUM",
      "notes": "This is the STANDARDIZED replacement for dateRangeWindow.ts. Still has double offset pattern but documented. Used by kpiHelpers.ts and chatbot services."
    },
    {
      "category": "HIGH - Chatbot Services",
      "file": "src/lib/services/chatbot/categoryTotals.ts",
      "symbols": ["fetchChatbotCategoryTotals", "computeRangesForKPI"],
      "timezone": "UTC",
      "current_range_logic": "const ranges = computeRangesForKPI({ g: granularity, startISO, endISO }) → Delegates to timeWindows.ts",
      "previous_range_logic": "Uses ranges.previous from computeRangesForKPI",
      "granularity_ui": "d/w/m/y from context",
      "granularity_request": "ALWAYS 'd' to Mindsaic API (hardcoded), UI granularity only controls window size",
      "offsets": [
        {
          "layer": "computeRangesForKPI",
          "offset": "Inherited: -1 day for end, -1 day for previous shift",
          "purpose": "See timeWindows.ts"
        },
        {
          "layer": "Date formatting",
          "offset": "formatDateForMindsaic: YYYY-MM-DD → YYYYMMDD (no offset, just formatting)",
          "purpose": "Mindsaic API format"
        }
      ],
      "formatting": "YYYY-MM-DD internal, YYYYMMDD for Mindsaic",
      "risk_level": "MEDIUM",
      "notes": "Dual POST pattern for current + previous. Timeout 15s. NO additional offset applied here."
    },
    {
      "category": "HIGH - Chatbot Services",
      "file": "src/lib/services/chatbot/townTotals.ts",
      "symbols": ["fetchChatbotTownTotals", "computeRangesForKPI"],
      "timezone": "UTC",
      "current_range_logic": "Identical to categoryTotals.ts",
      "previous_range_logic": "Identical to categoryTotals.ts",
      "granularity_ui": "d/w/m/y from context",
      "granularity_request": "ALWAYS 'd' to Mindsaic API",
      "offsets": [
        {
          "layer": "computeRangesForKPI",
          "offset": "Inherited: -1 day for end, -1 day for previous shift",
          "purpose": "See timeWindows.ts"
        }
      ],
      "formatting": "YYYY-MM-DD internal, YYYYMMDD for Mindsaic",
      "risk_level": "MEDIUM",
      "notes": "Identical pattern to categories. TOWN_SYNONYMS mapping applied."
    },
    {
      "category": "MEDIUM - API Route Direct Implementation",
      "file": "src/app/api/chatbot/audit/tags/route.ts",
      "symbols": ["GET", "POST", "computeRanges"],
      "timezone": "UTC",
      "current_range_logic": "computeRanges: currentStart = addDaysUTC(end, -(span - 1)) where end = endISO || yesterdayUTC() → OFFSET 1",
      "previous_range_logic": "previousStart = addDaysUTC(end, -span), previousEnd = addDaysUTC(end, -1) → OFFSET 2",
      "granularity_ui": "d/w/m/y from query param",
      "granularity_request": "ALWAYS 'd' to Mindsaic (hardcoded in POST body)",
      "offsets": [
        {
          "layer": "yesterdayUTC default",
          "offset": "-1 day",
          "purpose": "Default end anchor"
        },
        {
          "layer": "computeRanges for previous",
          "offset": "-1 day shift",
          "purpose": "Previous ends 1 day before current starts"
        }
      ],
      "formatting": "YYYY-MM-DD → YYYYMMDD via formatDateForMindsaic",
      "risk_level": "MEDIUM",
      "notes": "Route has its OWN computeRanges logic (doesn't use timeWindows.ts). Inconsistent with standard. Spans: d=7, w=7, m=33, y=365."
    },
    {
      "category": "MEDIUM - Analytics KPI Route",
      "file": "src/app/api/analytics/v1/header/kpis/route.ts",
      "symbols": ["GET", "handleKpiRequest"],
      "timezone": "UTC",
      "current_range_logic": "Delegates to handleKpiRequest → kpiHelpers.ts",
      "previous_range_logic": "Delegates to handleKpiRequest",
      "granularity_ui": "d/w/m/y from query param",
      "granularity_request": "Uses GA4 dimensions: 'date' or 'yearMonth' depending on granularity",
      "offsets": [
        {
          "layer": "handleKpiRequest → computeRangesForKPI",
          "offset": "Inherited from timeWindows.ts",
          "purpose": "See timeWindows.ts"
        }
      ],
      "formatting": "YYYY-MM-DD for GA4",
      "risk_level": "LOW",
      "notes": "Clean delegation to kpiHelpers. No additional offset."
    },
    {
      "category": "MEDIUM - Analytics KPI Helpers",
      "file": "src/lib/utils/analytics/kpiHelpers.ts",
      "symbols": ["handleKpiRequest", "queryKpiTotals", "computeKpiDeltaPct"],
      "timezone": "UTC",
      "current_range_logic": "const ranges = computeRangesForKPI(granularity, startQ, endQ) → Delegates to timeWindows.ts",
      "previous_range_logic": "Uses ranges.previous from computeRangesForKPI",
      "granularity_ui": "d/w/m/y",
      "granularity_request": "GA4 API with date dimension (or yearMonth for y)",
      "offsets": [
        {
          "layer": "computeRangesForKPI",
          "offset": "Inherited from timeWindows.ts",
          "purpose": "See timeWindows.ts"
        }
      ],
      "formatting": "YYYY-MM-DD for GA4",
      "risk_level": "LOW",
      "notes": "Proper separation of concerns. Delta % = null when prev <= 0."
    },
    {
      "category": "LOW - Range Calculations Utility",
      "file": "src/lib/utils/time/rangeCalculations.ts",
      "symbols": [
        "calculatePreviousPeriodAndGranularity",
        "calculatePreviousRange",
        "calculateDurationDays"
      ],
      "timezone": "Local Date (NO explicit UTC)",
      "current_range_logic": "Uses Date constructor from YYYY-MM-DD strings (local timezone interpretation)",
      "previous_range_logic": "prevStartDate = new Date(prevEndDate); prevStartDate.setDate(prevStartDate.getDate() - durationDays + 1)",
      "granularity_ui": "Auto-calculated based on duration: <=32 days=d, <=90=w, 91+=m",
      "granularity_request": "N/A - pure calculation utility",
      "offsets": [
        {
          "layer": "calculatePreviousRange",
          "offset": "prevEndDate.setDate(startDate.getDate() - 1) → -1 day shift",
          "purpose": "Previous ends 1 day before current starts"
        }
      ],
      "formatting": "YYYY-MM-DD (ISO)",
      "risk_level": "MEDIUM",
      "notes": "TIMEZONE WARNING: Uses local Date, NOT UTC. Called by UnifiedTimeContext.getPreviousPeriod. Potential timezone drift."
    },
    {
      "category": "LOW - Home Page Context",
      "file": "src/features/home/sectors/SectorsByTownSection.tsx",
      "symbols": ["useTownTimeframe", "startDate", "endDate"],
      "timezone": "Inherits from TownTimeContext (UnifiedTimeContext)",
      "current_range_logic": "startDate/endDate from useTownTimeframe() → UnifiedTimeContext",
      "previous_range_logic": "N/A - uses context values directly",
      "granularity_ui": "Inherited from context",
      "granularity_request": "N/A - display only",
      "offsets": [
        {
          "layer": "Context inheritance",
          "offset": "See UnifiedTimeContext",
          "purpose": "Inherited behavior"
        }
      ],
      "formatting": "Date objects → toISOString().split('T')[0] for API",
      "risk_level": "LOW",
      "notes": "Pure consumer of context. No additional date manipulation."
    },
    {
      "category": "LOW - DateTime Utilities",
      "file": "src/lib/utils/time/datetime.ts",
      "symbols": [
        "todayUTC",
        "yesterdayUTC",
        "addDaysUTC",
        "toISO",
        "parseISO",
        "deriveRangeEndingYesterday"
      ],
      "timezone": "UTC",
      "current_range_logic": "todayUTC: new Date(Date.UTC(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate()))",
      "previous_range_logic": "yesterdayUTC: addDaysUTC(todayUTC(), -1) → OFFSET 1",
      "granularity_ui": "N/A - pure utilities",
      "granularity_request": "N/A",
      "offsets": [
        {
          "layer": "yesterdayUTC",
          "offset": "-1 day",
          "purpose": "Get yesterday UTC date"
        },
        {
          "layer": "deriveRangeEndingYesterday",
          "offset": "-1 day for yesterday anchor",
          "purpose": "Build range ending yesterday"
        }
      ],
      "formatting": "YYYY-MM-DD (ISO)",
      "risk_level": "LOW",
      "notes": "Foundation utilities. Used everywhere. Correct UTC implementation."
    }
  ],
  "inconsistencies": [
    {
      "type": "CRITICAL - Double Offset",
      "description": "Multiple layers subtract -1 day independently",
      "affected_files": [
        "DateRangePicker.tsx (maxDate clamp)",
        "UnifiedTimeContext.tsx (calculateRangeForPeriod)",
        "timeWindows.ts (deriveRangeEndingYesterday + shiftPrevRange)",
        "dateRangeWindow.ts (deriveRangeEndingYesterday + derivePrevShifted)"
      ],
      "impact": "When user selects date X, they might get data for X-2 days due to compounded offsets",
      "recommendation": "URGENT: Audit if DatePicker selection already represents 'yesterday-adjusted' date, or if it's raw selection that needs downstream adjustment"
    },
    {
      "type": "HIGH - Timezone Inconsistency",
      "description": "Mixed UTC and local Date usage",
      "affected_files": [
        "UnifiedTimeContext.tsx (uses local Date() with .setDate)",
        "rangeCalculations.ts (uses local Date, no UTC)",
        "datetime.ts (proper UTC with Date.UTC)"
      ],
      "impact": "Potential timezone drift between components, especially for users in different timezones",
      "recommendation": "Standardize on UTC everywhere. Replace local Date() with UTC-based utilities from datetime.ts"
    },
    {
      "type": "HIGH - Duplicate Logic",
      "description": "Multiple implementations of range calculation",
      "affected_files": [
        "dateRangeWindow.ts (OLD - deprecated but still used)",
        "timeWindows.ts (NEW - standardized)",
        "api/chatbot/audit/tags/route.ts (custom computeRanges)"
      ],
      "impact": "Inconsistent behavior across different sections. Hard to maintain and debug.",
      "recommendation": "Migrate all code to use timeWindows.ts standardized functions. Remove dateRangeWindow.ts and inline computeRanges in API routes."
    },
    {
      "type": "MEDIUM - Granularity Confusion",
      "description": "UI granularity vs API request granularity not always clear",
      "affected_files": [
        "Chatbot services (UI granularity controls window, API always 'd')",
        "Analytics KPIs (UI granularity controls both window and GA4 dimension)",
        "rangeCalculations.ts (auto-calculates granularity from duration)"
      ],
      "impact": "Developers may not understand that Chatbot always sends 'd' to API regardless of UI selection",
      "recommendation": "Add explicit comments and types separating 'windowGranularity' vs 'requestGranularity'"
    },
    {
      "type": "MEDIUM - Previous Range Strategy Inconsistency",
      "description": "Different shift strategies for previous period",
      "affected_files": [
        "timeWindows.ts (shift -1 day for d/w/m, -30 for y)",
        "dateRangeWindow.ts (shift -1 day always)",
        "api/chatbot/audit/tags/route.ts (shift varies by granularity: d=7, m=33, y=365)",
        "rangeCalculations.ts (shift -1 day, contiguous)"
      ],
      "impact": "Previous period comparisons are inconsistent across sections. Analytics vs Chatbot show different 'previous' data.",
      "recommendation": "Define ONE standard shift strategy and apply globally. Document why -1 day shift vs contiguous span."
    }
  ],
  "standardization_plan": {
    "phase_1_urgent": {
      "title": "Fix Double Offset Bug",
      "tasks": [
        {
          "task": "Audit DateRangePicker behavior",
          "action": "Determine if user selection represents raw date or already-adjusted date. If already adjusted, remove downstream -1 offsets.",
          "priority": "CRITICAL",
          "files": ["DateRangePicker.tsx", "UnifiedTimeContext.setRange"]
        },
        {
          "task": "Add integration test for date flow",
          "action": "Create test: User selects 2025-01-20 → Verify API receives correct date range without double offset",
          "priority": "CRITICAL",
          "files": ["__tests__/date-range-flow.test.tsx"]
        },
        {
          "task": "Document offset policy",
          "action": "Create DATE_OFFSET_POLICY.md explaining: Why end=yesterday, which layer is responsible for -1 offset, what user sees vs what API receives",
          "priority": "HIGH",
          "files": ["DATE_OFFSET_POLICY.md"]
        }
      ]
    },
    "phase_2_high_priority": {
      "title": "Standardize on UTC and timeWindows.ts",
      "tasks": [
        {
          "task": "Migrate UnifiedTimeContext to UTC",
          "action": "Replace local Date() with datetime.ts UTC utilities (todayUTC, addDaysUTC, parseISO, toISO)",
          "priority": "HIGH",
          "files": ["UnifiedTimeContext.tsx"]
        },
        {
          "task": "Migrate rangeCalculations.ts to UTC",
          "action": "Replace new Date(string) with parseISO, use addDaysUTC instead of .setDate()",
          "priority": "HIGH",
          "files": ["rangeCalculations.ts"]
        },
        {
          "task": "Remove dateRangeWindow.ts",
          "action": "Find all imports, migrate to timeWindows.ts functions, delete deprecated file",
          "priority": "HIGH",
          "files": ["dateRangeWindow.ts", "ALL files importing it"]
        },
        {
          "task": "Standardize API route computeRanges",
          "action": "Replace inline computeRanges in api/chatbot/audit/tags/route.ts with timeWindows.computeRangesFromQuery",
          "priority": "MEDIUM",
          "files": ["api/chatbot/audit/tags/route.ts"]
        }
      ]
    },
    "phase_3_medium_priority": {
      "title": "Improve Type Safety and Documentation",
      "tasks": [
        {
          "task": "Create WindowGranularity vs RequestGranularity types",
          "action": "Separate types: WindowGranularity (UI control for date range size), RequestGranularity (API dimension parameter)",
          "priority": "MEDIUM",
          "files": ["lib/types.ts"]
        },
        {
          "task": "Add JSDoc to all date utilities",
          "action": "Document: timezone assumptions, offset behavior, when to use each function, examples",
          "priority": "MEDIUM",
          "files": ["datetime.ts", "timeWindows.ts", "rangeCalculations.ts"]
        },
        {
          "task": "Create date range visualization test page",
          "action": "Debug page showing: User selection → Context state → API request → API response → Rendered data. Helps identify offset bugs visually.",
          "priority": "LOW",
          "files": ["app/debug/date-flow/page.tsx"]
        }
      ]
    },
    "phase_4_long_term": {
      "title": "Architectural Improvements",
      "tasks": [
        {
          "task": "Centralize date range calculation",
          "action": "Create single DateRangeService class that ALL components/services use. No more ad-hoc calculations.",
          "priority": "LOW",
          "files": ["lib/services/DateRangeService.ts"]
        },
        {
          "task": "Add E2E tests for date consistency",
          "action": "Playwright test: Select date in Analytics → Switch to Chatbot → Verify same date range active → Check data consistency",
          "priority": "LOW",
          "files": ["e2e/date-consistency.spec.ts"]
        },
        {
          "task": "Consider date library adoption",
          "action": "Evaluate date-fns or Luxon for better timezone handling, immutability, clearer API",
          "priority": "LOW",
          "files": ["package.json", "ALL date utilities"]
        }
      ]
    }
  },
  "top_5_risks": [
    {
      "rank": 1,
      "risk": "Double Offset Bug - User sees wrong dates",
      "severity": "CRITICAL",
      "likelihood": "HIGH",
      "description": "DateRangePicker clamps to yesterday, then timeWindows.ts subtracts another day. User selects Jan 20, sees data for Jan 18.",
      "mitigation": "Immediate audit of DateRangePicker → Context → Service → API flow. Add integration test."
    },
    {
      "rank": 2,
      "risk": "Timezone Drift - Local vs UTC inconsistency",
      "severity": "HIGH",
      "likelihood": "MEDIUM",
      "description": "UnifiedTimeContext and rangeCalculations.ts use local Date, while datetime.ts uses UTC. Users in different timezones get different data.",
      "mitigation": "Standardize on UTC everywhere. Migration task in Phase 2."
    },
    {
      "rank": 3,
      "risk": "Inconsistent Previous Period Comparisons",
      "severity": "HIGH",
      "likelihood": "HIGH",
      "description": "Analytics uses -1 day shift, Chatbot API uses varying shifts (d=7, m=33, y=365). Previous period deltas don't match across pages.",
      "mitigation": "Define ONE shift strategy globally. Document rationale."
    },
    {
      "rank": 4,
      "risk": "Deprecated Code Still in Use",
      "severity": "MEDIUM",
      "likelihood": "MEDIUM",
      "description": "dateRangeWindow.ts is deprecated but still imported. Developers may use wrong function, causing bugs.",
      "mitigation": "Remove deprecated file after migration. Add ESLint rule to prevent future deprecated imports."
    },
    {
      "rank": 5,
      "risk": "Granularity Confusion - Developer Misunderstanding",
      "severity": "MEDIUM",
      "likelihood": "MEDIUM",
      "description": "UI granularity 'd' means different things: Chatbot window=1 day but API request='d', Analytics window=7 days (dayAsWeek). Easy to misuse.",
      "mitigation": "Separate types for WindowGranularity vs RequestGranularity. Add JSDoc examples."
    }
  ],
  "quick_wins": [
    {
      "id": 1,
      "title": "Add DATE_OFFSET_POLICY.md",
      "effort": "1 hour",
      "impact": "HIGH",
      "description": "Document current offset policy: Who is responsible for -1 day, when it happens, why. Prevents future confusion."
    },
    {
      "id": 2,
      "title": "Add JSDoc to todayUTC/yesterdayUTC",
      "effort": "30 minutes",
      "impact": "MEDIUM",
      "description": "Inline docs explaining: 'Returns UTC midnight for today/yesterday. Always use this instead of new Date() to avoid timezone issues.'"
    },
    {
      "id": 3,
      "title": "Create date-range-flow integration test",
      "effort": "2 hours",
      "impact": "HIGH",
      "description": "Test: Mock user selecting Jan 20 → Verify Context receives Jan 20 → Verify API receives Jan 19 (yesterday) → Verify no double offset. Catches regression."
    },
    {
      "id": 4,
      "title": "Add console.warn for deprecated dateRangeWindow.ts imports",
      "effort": "15 minutes",
      "impact": "LOW",
      "description": "Deprecation warning at runtime until migration complete. Helps developers notice they're using old code."
    },
    {
      "id": 5,
      "title": "Rename dayAsWeek parameter to isSeriesView",
      "effort": "30 minutes",
      "impact": "MEDIUM",
      "description": "More intuitive name: computeRangesForKPI(g, start, end, isSeriesView=false). Makes intent clearer."
    }
  ]
}
